#!/usr/bin/env python3

from Crypto.Util.number import *

def get_pq(mod):
	x = 3

	while mod % x != 0:
		x += 1

	return x, mod // x

c = 231722077914684998818993776518942509384465803531548983146869754932667754136315007943497593396644630089073196170276638447665765624960333289097324447779290700092664403080584161276778064977902852018557301618273474139777712464709585187730351308079009718870031364399745764326436147001877583703027251271265576350621173
e = 65537
n = 257208938346934642693512128888810986151634836498153528507638790770764504946719195736987613302526116425873247750032929224521429342437621496424825810959518932424007107126934957421561529561264636001476988808843995824395131838577901446930016348590793828420808295335603083382120208905347497068915850813369038886980997
p , q = get_pq(n)
d = inverse(e, (p-1) * (q-1))
m = pow(c, d, n)
f = long_to_bytes(m).decode()

print(f)
